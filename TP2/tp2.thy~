theory tp2
imports Main
begin



(* Exercice 1 *)

fun member:: " 'a \<Rightarrow> 'a list \<Rightarrow> bool"
  where
"(member b Nil) = False" |
"(member b (Cons c d)) = (if b=c then True else (member b d))" 

value "member (1::int) [1, 2, 3]"
value "member (1::int) [2, 4]"
value "member (1::int) []"


(* Exercice 2 *)


fun isSet:: "'a list \<Rightarrow> bool"
  where
"(isSet [])  = True"|
"(isSet (a#b)) = (if (member a b) then False else (isSet b))"

value "isSet [(1::int), 2, 3]"
value "isSet [(1::int), 1, 3]"
value "isSet ([]::int list)" 
 

(* Exercice 3 *)

fun clean:: "'a list \<Rightarrow> 'a list"
  where
"clean [] = []"|
"clean (a#b) = (if (member a b) then (clean b) else (a#(clean b)))"

value "clean [(1::int),2,3]"
value "clean [(1::int),1,3]"
value "clean [(1::int),1,2,2,2,4]"
value "clean [(1::int)]"


(* Exercice 4 *)

lemma "  (member a l) = (member a (clean l)) "
  nitpick
  apply auto
  apply (induct l)
  apply auto
  apply (induct l)
  apply auto
  by (metis (full_types) tp2.member.simps(2))


(* Exercice 5 *)

lemma "(isSet (clean l))"
  nitpick
  apply (induct l)
   apply auto[1]
  apply (induct l)
   apply auto
  apply (induct l)
   apply auto
  sorry

(* Exercice 6 *)

fun delete:: "'a \<Rightarrow> 'a list \<Rightarrow> 'a list"
  where
"(delete x []) = []"|
"(delete a (b#c)) = (if (a=b)then (delete a c) else b#(delete a c))  "

value "delete 2 [(1::int),2,3]"
value "delete 2 [(1::int),1,3]"
value "delete 2 [(1::int),1,2,2,2,4]"
value "delete 2 [(1::int)]"

(* Exercice 7 *)

(* un élément supprimé avec delete dans un ensemble ne doit plus appartenir à cet ensemble *)
lemma "\<not>(member a (delete a l))"
  nitpick
  apply (induct l)
  apply auto
  done

(* si un élément est présent dans l'ensemble et qu'il n'est pas l'élément à supprimer, *)
(* alors il doit rester présent dans cet ensemble *)
lemma "((member a l) \<and> ( a \<noteq> b) ) \<longrightarrow>  ( member a (delete b l))"
  nitpick
  apply auto
  apply (induct l)
  apply auto
  done


(* Exercice 8 *)

fun intersection:: " 'a list \<Rightarrow> 'a list \<Rightarrow> 'a list"
  where
"(intersection [] []) = []" |
"(intersection [] _ ) = []" |
"(intersection (a#b) c) = (if (member a c) then (a#(intersection b c)) else (intersection b c))"


value "(intersection [(1::int), 2, 3] [3, 4])"
value "(intersection [(1::int), 2, 3] [1, 3, 3])"


(* Exercice 9 *)

(* si un élément est membre à la fois dans les 2 listes alors il est présent dans l'intersection des 2 *)
lemma "((member a l) \<and> (member a m)) \<longrightarrow> (member a (intersection l m))"
  nitpick
  apply auto
  apply (induct l)
  apply auto
  done


(* Exercice 10 *)

(* vérifions que le résultat de 'intersection' satisfait le 'isSet' *)
lemma "(isSet l) \<and> (isSet m) \<longrightarrow> ( isSet (intersection l m))"
  nitpick
  apply auto
  apply (induct l)
   apply auto[1]
   apply (induct m)
    apply auto[1]
   apply auto
    apply (induct l)
     apply (induct l)
      apply auto
  sorry


(* Exercice 11 *)

fun union:: "'a list \<Rightarrow> 'a list \<Rightarrow> 'a list"
  where
"(union [] []) = []" |
"(union [] a ) = a" |
"(union (a#b) l) = (clean (a#(union b l))) "

value "(union [(1::int), 2, 3] [4,5,6])"
value "(union [(1::int), 2, 3, 4] [4,5,6,6])"

(* Exercice 12 *)

(* si un élément est présent dans  ... *)




end