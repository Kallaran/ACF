// Code generated by Isabelle
package tp67

import utilities.Datatype._
import scala.language.implicitConversions

// automatic conversion of utilities.Datatype.Int.int to Int.int
object AutomaticConversion{
  implicit def int2int(i:utilities.Datatype.Int.int):Int.int =
    i match {
      case utilities.Datatype.Int.int_of_integer(i)=>Int.int_of_integer(i)
    }

  def bit_cut_integer(k: BigInt): (BigInt, Boolean) =
    (if (k == BigInt(0)) (BigInt(0), false)
    else {
      val (r, s): (BigInt, BigInt) =
        ((k: BigInt) => (l: BigInt) => if (l == 0) (BigInt(0), k) else
          (k.abs /% l.abs)).apply(k).apply(BigInt(2));
      ((if (BigInt(0) < k) r else (- r) - s), s == BigInt(1))
    })

  def char_of_integer(k: BigInt): String.char =
  {
    val (q0, b0): (BigInt, Boolean) = bit_cut_integer(k)
    val (q1, b1): (BigInt, Boolean) = bit_cut_integer(q0)
    val (q2, b2): (BigInt, Boolean) = bit_cut_integer(q1)
    val (q3, b3): (BigInt, Boolean) = bit_cut_integer(q2)
    val (q4, b4): (BigInt, Boolean) = bit_cut_integer(q3)
    val (q5, b5): (BigInt, Boolean) = bit_cut_integer(q4)
    val (q6, b6): (BigInt, Boolean) = bit_cut_integer(q5)
    val a: (BigInt, Boolean) = bit_cut_integer(q6)
    val (_, aa): (BigInt, Boolean) = a;
    String.Chara(b0, b1, b2, b3, b4, b5, b6, aa)
  }

  def map[A, B](f: A => B, x1: List[A]): List[B] = (f, x1) match {
    case (f, Nil) => Nil
    case (f, x :: xs) => f(x) :: map[A, B](f, xs)
  }

  def explodeList(l: List[Char]): List[String.char] ={
    (l.map(c => { val k: Int = c.toInt; if (k < 128) BigInt(k) else sys.error("Non-ASCII character in literal") })).map(a => char_of_integer(a))
  }

  def explode(s: String): List[String.char] ={
    explodeList(s.toCharArray.toList)
  }

  // conversion from Scala String to HOL string
  implicit def string2charList(s:String):List[String.char]= explode(s)

  // conversion from Scala List[Char] to HOL List[String.char]
  implicit def charList2charList(l:List[Char]):List[String.char]= explodeList(l)
  // conversion of a pair with a Scala List[String] on the first position
  // to an HOL pair with an HOL List[String.char] on first position
  implicit def tupleString2tupleString[T](t:(List[Char],T)):
  (List[String.char],T)= t match { case (e1,e2) => (charList2charList(e1),e2)}

  // conversion from Isabelle Int.int to Project Int.int
  implicit def int2Dataint(i:Int.int):utilities.Datatype.Int.int =
    i match {
      case Int.int_of_integer(i)=>utilities.Datatype.Int.int_of_integer(i)
    }

  def stringChar2char(x: String.char): Char = {
    x match {
      case String.Chara(x1,x2,x3,x4,x5,x6,x7,x8) => {
        var n = 0;
        n = if (x8) 2*n+1 else 2*n;
        n = if (x7) 2*n+1 else 2*n;
        n = if (x6) 2*n+1 else 2*n;
        n = if (x5) 2*n+1 else 2*n;
        n = if (x4) 2*n+1 else 2*n;
        n = if (x3) 2*n+1 else 2*n;
        n = if (x2) 2*n+1 else 2*n;
        n = if (x1) 2*n+1 else 2*n;
        n.toChar
      }
    }
  }

  // conversion from Isabelle String to Lists of Chars
  implicit def charList2String(l: List[String.char]): List[Char] = {
    l.map(stringChar2char(_))
  }
}

import AutomaticConversion._


object HOL {

  trait equal[A] {
    val `HOL.equal`: (A, A) => Boolean
  }
  def equal[A](a: A, b: A)(implicit A: equal[A]): Boolean = A.`HOL.equal`(a, b)
  object equal {
    implicit def `String.equal_char`: equal[String.char] = new equal[String.char]
    {
      val `HOL.equal` = (a: String.char, b: String.char) =>
        String.equal_chara(a, b)
    }
  }

  def eq[A : equal](a: A, b: A): Boolean = equal[A](a, b)

} /* object HOL */

object Code_Numeral {

  def integer_of_int(x0: Int.int): BigInt = x0 match {
    case Int.int_of_integer(k) => k
  }

} /* object Code_Numeral */

object Int {

  abstract sealed class int
  final case class int_of_integer(a: BigInt) extends int

  def plus_int(k: int, l: int): int =
    int_of_integer(Code_Numeral.integer_of_int(k) +
      Code_Numeral.integer_of_int(l))

  def zero_int: int = int_of_integer(BigInt(0))

  def equal_int(k: int, l: int): Boolean =
    Code_Numeral.integer_of_int(k) == Code_Numeral.integer_of_int(l)

  def minus_int(k: int, l: int): int =
    int_of_integer(Code_Numeral.integer_of_int(k) -
      Code_Numeral.integer_of_int(l))

} /* object Int */

object Product_Type {

  def equal_bool(p: Boolean, pa: Boolean): Boolean = (p, pa) match {
    case (p, true) => p
    case (p, false) => ! p
    case (true, p) => p
    case (false, p) => ! p
  }

} /* object Product_Type */

object String {

  abstract sealed class char
  final case class
  Chara(a: Boolean, b: Boolean, c: Boolean, d: Boolean, e: Boolean, f: Boolean,
        g: Boolean, h: Boolean)
    extends char

  def equal_chara(x0: char, x1: char): Boolean = (x0, x1) match {
    case (Chara(x1, x2, x3, x4, x5, x6, x7, x8),
    Chara(y1, y2, y3, y4, y5, y6, y7, y8))
    => Product_Type.equal_bool(x1, y1) &&
      (Product_Type.equal_bool(x2, y2) &&
        (Product_Type.equal_bool(x3, y3) &&
          (Product_Type.equal_bool(x4, y4) &&
            (Product_Type.equal_bool(x5, y5) &&
              (Product_Type.equal_bool(x6, y6) &&
                (Product_Type.equal_bool(x7, y7) &&
                  Product_Type.equal_bool(x8, y8)))))))
  }

} /* object String */

object Lista {

  def equal_list[A : HOL.equal](x0: List[A], x1: List[A]): Boolean = (x0, x1)
  match {
    case (Nil, x21 :: x22) => false
    case (x21 :: x22, Nil) => false
    case (x21 :: x22, y21 :: y22) =>
      HOL.eq[A](x21, y21) && equal_list[A](x22, y22)
    case (Nil, Nil) => true
  }

} /* object Lista */

object Analyzer {


  abstract sealed class typeabs
  final case class Define(a: Int.int) extends typeabs
  final case class Undefine() extends typeabs

  def bcouple(x0: (Boolean, List[(List[String.char], typeabs)])): Boolean = x0
  match {
    case (b, st) => b
  }

  def assocabs(uu: List[String.char], x1: List[(List[String.char], typeabs)]):
  typeabs
  =
    (uu, x1) match {
      case (uu, Nil) => Undefine()
      case (x1, (x, y) :: xs) =>
        (if (Lista.equal_list[String.char](x, x1)) y else assocabs(x1, xs))
    }

  def subabs(x0: typeabs, uu: typeabs): typeabs = (x0, uu) match {
    case (Undefine(), uu) => Undefine()
    case (Define(v), Undefine()) => Undefine()
    case (Define(x), Define(y)) => Define(Int.minus_int(x, y))
  }

  def addabs(x0: typeabs, uu: typeabs): typeabs = (x0, uu) match {
    case (Undefine(), uu) => Undefine()
    case (Define(v), Undefine()) => Undefine()
    case (Define(x), Define(y)) => Define(Int.plus_int(x, y))
  }

  def evaleabs(x0: expression, e: List[(List[String.char], typeabs)]): typeabs =
    (x0, e) match {
      case (Constant(s), e) => Define(s)
      case (Variable(s), e) => assocabs(s, e)
      case (Sum(e1, e2), e) => addabs(evaleabs(e1, e), evaleabs(e2, e))
      case (Sub(e1, e2), e) => subabs(evaleabs(e1, e), evaleabs(e2, e))
    }

  def eqabs(x0: typeabs, x1: typeabs): Boolean = (x0, x1) match {
    case (Undefine(), Undefine()) => true
    case (Define(x), Define(y)) => Int.equal_int(x, y)
    case (Define(v), Undefine()) => false
    case (Undefine(), Define(v)) => false
  }

  def evalcabs(x0: condition, t: List[(List[String.char], typeabs)]): Boolean =
    (x0, t) match {
      case (Eq(e1, e2), t) => eqabs(evaleabs(e1, t), evaleabs(e2, t))
    }

  def affabs(a: (List[String.char], typeabs),
             x1: List[(List[String.char], typeabs)]):
  List[(List[String.char], typeabs)]
  =
    (a, x1) match {
      case (a, Nil) => List(a)
      case ((x1, y1), (x, y) :: xs) =>
        (if (Lista.equal_list[String.char](x, x1)) (x1, y1) :: xs
        else (x, y) :: affabs((x1, y1), xs))
    }

  def san5(x0: statement, x1: (Boolean, List[(List[String.char], typeabs)])):
  (Boolean, List[(List[String.char], typeabs)])
  =
    (x0, x1) match {
      case (Skip, (b, st)) => (b, st)
      case (Exec(expr), (b, st)) =>
        (if (eqabs(evaleabs(expr, st), Undefine()) ||
          eqabs(evaleabs(expr, st), Define(Int.zero_int)))
          (false, st) else (b, st))
      case (If(conditiona, stat1, stat2), (b, st)) =>
        (if (evalcabs(conditiona, st)) san5(stat1, (b, st))
        else san5(stat2, (b, st)))
      case (Seq(stat1, stat2), (b, st)) =>
        (if (bcouple(san5(stat1, (b, st)))) san5(stat2, san5(stat1, (b, st)))
        else (false, st))
      case (Print(expressiona), (b, st)) => (b, st)
      case (Aff(stringa, expressiona), (b, st)) =>
        (b, affabs((stringa, evaleabs(expressiona, st)), st))
      case (Read(stringa), (b, st)) => (b, affabs((stringa, Undefine()), st))
    }

  def safe(p: statement): Boolean = bcouple(san5(p, (true, Nil)))

}